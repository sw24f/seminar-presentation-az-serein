---
title: "UT-GLOBUS"
subtitle: "A Global Building Heights Dataset for Urban Studies"
format:
    revealjs:
        slide-number: true
        preview-links: true
        theme: default
---

## Overview 

Title:

GLObal Building heights for Urban Studies (UT-GLOBUS) for city- and street- scale urban simulations: Development and first applications

- The paper is mainly about the DEVELOPMENT and first APPLICATIONS of UT-GLOBUS.
- It's published in **Nature**, **Scientific Data** on August 15, 2024.

## Contents

This presentation on UT-GLOBUS will cover:

- **What is UT-GLOBUS?**
    - Introduction
- **How to develop UT-GLOBUS?**
    - Data acquisition and processing
    - Methods
    - Validation
- **Why use UT-GLOBUS?**
    - First Applications

# What is UT-GLOBUS?

## UT-GLOBUS

University of Texas - GLObal Building heights for Urban Studies (UT-GLOBUS).

- **Introduction to UT-GLOBUS:**
    - UT-GLOBUS combines **Tabular data**(spaceborne elevation, population density and polygon area) and **LiDAR** with **Random Forest Regression** to estimate building-level information.

    - UT-GLOBUS is a dataset developed to provide detailed **Building Heights** and **Urban Canopy Parameters (UCPs)** for over 1,200 cities around the world.


# How to develop UT-GLOBUS

## Data Acquisition and Processing

- **Urban Block Datasets:** Acquired diverse building sizes (high, mid, low-rise) for model generalization.
- **LiDAR Data:** Light Detection and Ranging.
- **Spaceborne Elevation Data:** Combined ICESat-2, GEDI, ALOS DSM and WSF 3-D datasets to address spatial gaps and urban sprawl.
- **Population Density:** High correlation between population density and building Heights.
- **2-D Building Footprints:** Utilized OSM, Google and Microsoft footprints, with deep learning for areas lacking coverage.

## Development Process

![A picture of the Development of UT-GLOBUS](Development.png)

## Random Forest Regression

Random Forest Regression is a specific use of the Random Forest algorithm to predict continuous numeric values.

- **Key Attributes:**
    - Ground Truth:  LiDAR-based nDSM building height used as the target variable for training.
    - Spaceborne AGL Height:  WSF 3-D adjusted spaceborne nDSM assigned to each building footprint, providing primary height information.
    - Population Density: Average population density assigned to each building footprint polygon to capture nearby population.
    - Polygon Area: Spatial extent of each building footprint, calculated as an attribute.










## Executable Code

To display the output of a code block in a slide, enclose the programming language inside `{}`. For example, the following code *in the Quarto document*

```` python
```{{python}}
import numpy as np
np.arange(10)
```
````

will yield the following output *in the rendered slide*.

```{python}
import numpy as np
np.arange(10)
```

Including a period inside `{}` before the programming language will display the code block instead of running it.

## Images from Code Output

Executable code blocks can be used to display images in slides. Consider the following code example.

```` python
```{{python}}
#| fig-align: center
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

## Images from Code Output -- Example

The preceding code example will create the following image.

```{python}
#| fig-align: center
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Images from Files

It is also possible to insert an image from a saved file.

```{python}
#| fig-align: center
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Images from Files -- Markdown Syntax

To import a saved image for display in a slide, use the following markdown syntax as an example. This line of code may be used to display the image on the previous slide.

``` markdown
![A line plot on a polar axis](polar_axis.png)
```

- The caption for the figure is enclosed inside `[]`.
- The file path for the saved image file is enclosed inside `()`.

Remember to use relative references, as opposed to absolute references, when specifying the file path!

## Markdown Syntax for Links

To create a link, use the same markdown syntax as before, but omit the initial `!`.

- The text of the link is enclosed inside `[]`.
- The URL is enclosed inside `()`.

For example, use the following markdown syntax to obtain a link to the Quarto website.

``` markdown
[Quarto](https://quarto.org)
```

[Quarto](https://quarto.org)

## Tables -- Markdown Syntax

Refer to the [Quarto documentation](https://quarto.org/docs/authoring/tables.html) for a comprehensive explanation on the details of creating tables in markdown.

The basic syntax for a simple table is illustrated by the following example.

``` markdown
| Left | Center | Right |
|:-----|:------:|------:|
| ABC  | ABC    | ABC   |
| ABCD | ABCD   | ABCD  |
```

| Left | Center | Right |
|:-----|:------:|------:|
| ABC  | ABC    | ABC   |
| ABCD | ABCD   | ABCD  |

## Mathematical Notation

- Use LaTeX to typeset mathematical notation.
- In-text math is enclosed with a single `$` on each side.
- Display math is enclosed with a double `$$` on each side.

## LaTeX Example

``` markdown
$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$
The quadratic formula is given by the above equation.
This is used to find the solutions to the equation $ax^2 + bx + c = 0$.
```

$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$
The quadratic formula is given by the above equation.
This is used to find the solutions to the equation $ax^2 + bx + c = 0$.

# Slide Customization

## Incremental Lists

::: {.incremental}
- This slide contains an incremental list.
- Lists on specific slides can be configured to display incrementally.
- Alternatively, lists can display incrementally by default for the entire presentation.
- Additionally, incremental displays can be disabled on specific slides, when lists display incrementally by default.
:::

## Incremental Lists -- Entire Presentation

By including the following under the `revealjs` options in the YAML block, bulleted and numbered lists will display incrementally by default.

``` yaml
---
title: "Presentation Title"
format:
    revealjs:
        incremental: true
---
```

## Incremental Lists -- Specific Slides

By enclosing a list's code in a div, the display of the list can go against the default setting.

To make a list incremental:

``` markdown
::: {.incremental}
- Item 1
- Item 2
:::
```

To make a list non-incremental:

``` markdown
::: {.nonincremental}
- Item 1
- Item 2
:::
```

## Div Containers

:::: {.columns}

::: {.column width="50%"}
- The previous slide demonstrated how div containers may be used to override default settings.
- The next slide will demonstrate how they may be used to display content in multiple columns, as in the current slide.
:::

::: {.column width="50%"}
- Divs are useful for adding various attributes to specific pieces of code.
- Furthermore, divs may be nested within each other.
- For more information on the syntax and application of div containers, refer to the [Quarto documentation](https://quarto.org/docs/authoring/markdown-basics.html#sec-divs-and-spans).
:::

::::

## Multiple Columns

This framework, which makes use of nested divs, enables the display of multiple columns in a slide.

``` markdown
:::: {.columns}

::: {.column width="50%"}
Left Column
:::

::: {.column width="50%"}
Right Column
:::

::::
```

## Avoiding Content Overflow: Introducing a Scroll Bar {.scrollable}

- Be mindful of the amount of content on each slide.
- Render the presentation frequently to see if content overflow is present on any slides.
- If a slide overflows with content, consider separating it into more than one slide.
- If separating the content is not possible, it may be useful to introduce a scroll bar into the slide.

This can be accomplished by including `{.scrollable}` after the slide title, as shown in the following example.

``` markdown
## Avoiding Content Overflow: Introducing a Scroll Bar {.scrollable}
```

If content overflow is a problem throughout the presentation, the scroll bar can be applied to all slides by including `scrollable: true` under `revealjs` in the YAML block.

## Avoiding Content Overflow: Decreasing the Text Size {.smaller}

- Be mindful of the amount of content on each slide.
- Render the presentation frequently to see if content overflow is present on any slides.
- If a slide overflows with content, consider separating it into more than one slide.
- If separating the content is not possible, it may be useful to decrease the size of the text on the slide.

This can be accomplished by including `{.smaller}` after the slide title, as shown in the following example.

``` markdown
## Avoiding Content Overflow: Decreasing the Text Size {.smaller}
```

If content overflow is a problem throughout the presentation, the smaller text size can be applied to all slides by including `smaller: true` under `revealjs` in the YAML block.

# Conclusion

## Summary

This presentation has covered:

- Creating slides in a Revealjs presentation
- Adding various content to slides
- Basic ways to customize slides

It would be impossible to describe all the capabilities of Revealjs in one presentation. This presentation is meant to provide an introduction to the broad functionality of Revealjs.

## Further Reading

For more information about creating Revealjs presentations:

- [Presentations -- Quarto](https://quarto.org/docs/presentations/)
- [Revealjs -- Quarto](https://quarto.org/docs/presentations/revealjs/)
- [Presenting Slides -- Quarto](https://quarto.org/docs/presentations/revealjs/presenting.html)

For a useful guide on fundamental markdown syntax:

- [Markdown Basics -- Quarto](https://quarto.org/docs/authoring/markdown-basics.html)

# THANK YOU!!!